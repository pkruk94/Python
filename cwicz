#lang racket

(require racklog)

;; predykat unarny %male reprezentuje zbiór mężczyzn
(define %male
  (%rel ()
        [('adam)]
        [('john)]
        [('joshua)]
        [('mark)]
        [('david)]))

;; predykat unarny %female reprezentuje zbiór kobiet
(define %female
  (%rel ()
        [('eve)]
        [('helen)]
        [('ivonne)]
        [('anna)]))

;; predykat binarny %parent reprezentuje relację bycia rodzicem
(define %parent
  (%rel ()
        [('adam 'helen)]
        [('adam 'ivonne)]
        [('adam 'anna)]
        [('eve 'helen)]
        [('eve 'ivonne)]
        [('eve 'anna)]
        [('john 'joshua)]
        [('helen 'joshua)]
        [('ivonne 'david)]
        [('mark 'david)]))

;; predykat binarny %sibling reprezentuje relację bycia rodzeństwem
(define %sibling
  (%rel (a b c)
        [(a b)
         (%parent c a)
         (%parent c b)]))

;; predykat binarny %sister reprezentuje relację bycia siostrą
(define %sister
  (%rel (a b)
        [(a b)
         (%sibling a b)
         (%female a)]))

;; predykat binarny %ancestor reprezentuje relację bycia przodkiem
(define %ancestor
  (%rel (a b c)
        [(a b)
         (%parent a b)]
        [(a b)
         (%parent a c)
         (%ancestor c b)]))



;;


(define %grandson
  (%rel (a b c)
        [(a b)
         (%parent b c)
         (%parent c a)
         (%male a)]))

(define %cousin
  (%rel (a b c d)
        [(a b)
         (%parent c a)
         (%parent d b)
         (%sibling c d)]))


(define %is_mother
  (%rel (a c)
        [(a)
         (%parent a c)
         (%female a)]))

(define %is_father
  (%rel (a c)
        [(a)
         (%parent a c)
         (%male a)]))
         

;; trzeba użyć and 
(%find-all (x) (%ancestor 'mark x))
(%find-all (x) (%ancestor 'adam x))
(%find-all (x) (%sister x 'ivonne))
(%find-all (x y) (%cousin x y))











;;;;;;;;;;;;;;;;;;;;;

(define %my-append
  (%rel (x xs ys zs)
        [(null ys ys)]
        [((cons x xs) ys (cons x zs))
         (%my-append xs ys zs)]))

(define %my-member
  (%rel (x xs y)
        [(x (cons x xs))]
        [(y (cons x xs))
         (%my-member y xs)]))

(define %select
  (%rel (x xs y ys)
        [(x (cons x xs) xs)]
        [(y (cons x xs) (cons x ys))
         (%select y xs ys)]))

;; prosta rekurencyjna definicja
(define %simple-length
  (%rel (x xs n m)
        [(null 0)]
        [((cons x xs) n)
         (%simple-length xs m)
         (%is n (+ m 1))]))

;; test w trybie +- (działa)
(%find-all (a) (%simple-length (list 1 2) a))
;; test w trybie ++ (działa)
(%find-all () (%simple-length (list 1 2) 2))
;; test w trybie -+ (1 odpowiedź, pętli się)
(%which (xs) (%simple-length xs 2))
;; test w trybie -- (nieskończona liczba odpowiedzi)
(%which (xs a) (%simple-length xs a))

;; definicja zakładająca, że długość jest znana
(define %gen-length
  (%rel (x xs n m)
        [(null 0) !]
        [((cons x xs) n)
         (%is m (- n 1))
         (%gen-length xs m)]))
;; test w trybie ++ (działa)
(%find-all () (%gen-length (list 1 2) 2))
;; test w trybie -+ (działa)
(%find-all (xs) (%gen-length xs 2))


(newline)

;(%which (xs ys) (%append xs xs ys))
(%which (x) (%select x (list 1 2 3 4) (list 1 2 4)))
(%which (x) (%append (list 1 2 3) x (list 1 2 3 4 5)))






;; z6

(newline)
(define %sublist
  (%rel (x y xs ys zs)
        [(null xs)]
        [((cons x xs) ys)
         (%append y (cons x zs) ys)
         (%sublist xs zs)]))

;; jaki tryb? odwrócone zaptanie sie zapetli
(%which () (%sublist (list 1 2 3 4 5 6) (list 4 5 6)))
(%which () (%sublist (list 1 2 3) (list 1 2 3 4 5)))
(%find-all (xs) (%sublist xs (list 1 2 3)))
(%which () (%sublist (list 1 2 3) (list 1 2 3)))
(%which () (%sublist (list 2 4 6) (list 1 2 3 4 5 6)))
(%which () (%sublist null (list 1 2 3 4 5)))
(%which () (%sublist (list 1 2 3) (list 3 4 5)))
(%which () (%sublist (list 1 4 2) (list 1 2 3 4 5)))
(newline)
;; z7

;; sprawdzanie dlugości ? %is?
(define %perm
  (%rel (x xs ys zs)
        [(null null)]
        [((cons x xs) ys)
         (%select x ys zs)
         (%perm xs zs)]))

(%which () (%perm (list 1 2 3) (list 3 4 5)))
(%find-all (xs) (%perm xs (list 1 2 3)))
;(%find-all (xs) (%perm (list 1 2 3) xs))

(%which () (%perm (list 1 2 3 4) (list 3 2 1)))
(%which () (%perm (list 4 1 2) (list 1 2 4)))
(%which () (%perm (list 1 2 3) (list 1 2 3)))
(%which () (%perm (list 3 2 1) (list 1 2 3)))
(%which () (%perm (list 6 5 4 3 2 1) (list 1 2 3 4 5 6)))
(%which () (%perm (list 5 3 4 6 2 1) (list 1 2 3 4 5 6)))


;; tryby ++ PODAJEM OBA ARGUMENTY +- PODAJEMY PIERWSZY -+ PODAEJMY DRUGI -- NIE PODAJEMY W OGOLE
;; MOZE BYC WIECEJ ARGUMENTOW +++++, ------ ITD

(newline)
;; z8

(define (list->num xs)
  (define (helper ys outcome)
    (if (null? ys)
        outcome
        (helper (cdr ys) (+ (car ys) (* 10 outcome)))))
  (helper xs 0))

(list->num (list 1 3 3 7))
(list->num (list 1 2 3 4 5 6))



(%let (xs a b)
      (%which (d e m n o r s y)
              (%and (%sublist xs '(1 2 3 4 5 6 7 8 9 0))
                    (%simple-length xs 8)
                    (%perm (list d e m n o r s y) xs)
                    (%=/= s 0)
                    (%=/= m 0)
                    (%is a (+ (list->num (list s e n d))
                              (list->num (list m o r e))))
                    (%is b (list->num (list m o n e y)))
                    (%= a b))))



